generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Character {
    chr_id                      String                  @id @default(uuid())
    chr_name                    String
    chr_epithet                 String
    chr_physical_description    String
    chr_height                  String
    chr_occupation              String
    chr_birthday                String
    chr_observations            String
    chr_pronouns                Pronouns
    chr_status                  Status
    chr_anc_id                  String
    chr_cls_id                  String
    chr_sch_id                  String?
    chr_plc_id                  String
    chr_cmp_id                  String
    chr_first_appeared_cmp_id   String
    chr_last_appeared_cmp_id    String
    chr_archmage                Boolean
    chr_archmage_date           String?
    chr_archmage_plc_id         String?
    chr_written_by_usr_id       String
    chr_created_by_usr_id       String
    chr_updated_by_usr_id       String
    chr_created_at              DateTime                @default(now())
    chr_updated_at              DateTime                @updatedAt
    chr_anc                     Ancestry                @relation(fields: [chr_anc_id], references: [anc_id])
    chr_cls                     Class                   @relation(fields: [chr_cls_id], references: [cls_id])
    chr_sch                     School?                 @relation(fields: [chr_sch_id], references: [sch_id])
    chr_place                   Place                   @relation("PlaceCharacter", fields: [chr_plc_id], references: [plc_id])
    chr_cmp                     Campaign                @relation(fields: [chr_cmp_id], references: [cmp_id])
    chr_archmage_plc            Place?                  @relation("PlaceArchmage", fields: [chr_archmage_plc_id], references: [plc_id])
    chr_qte                     Quote[]    
    chr_ttl                     Title[]
    chr_affiliations            Affiliation[]
    chr_parent_rel              FamilyRelationship[]    @relation("ParentCharacter")
    chr_child_rel               FamilyRelationship[]    @relation("ChildCharacter")
    chr_uni_1                   FamilyUnion[]           @relation("UnionCharacter1")
    chr_uni_2                   FamilyUnion[]           @relation("UnionCharacter2")
    chr_written_by_usr          User[]                  @relation("WrittenByUser")
    chr_created_by_usr          User[]                  @relation("CreatedByUser")
    chr_updated_by_usr          User[]                  @relation("UpdatedByUser")
    chr_cmp_usr                 CampaignUser[]
}

model Place {
    plc_id            String            @id @default(uuid())
    plc_name          String
    plc_description   String
    plc_parent_id     String?
    plc_created_at    DateTime          @default(now())
    plc_updated_at    DateTime          @updatedAt
    plc_parent        Place?            @relation("PlaceParent", fields: [plc_parent_id], references: [plc_id])
    plc_children      Place[]           @relation("PlaceParent")
    plc_chr_archmage  Character[]       @relation("PlaceArchmage")
    plc_chr           Character[]       @relation("PlaceCharacter")
    plc_aff           Affiliation[]
    plc_org           Organization[]
}

model Title {
    ttl_id            String        @id @default(uuid())
    ttl_name          String
    ttl_description   String
    ttl_org_id        String?
    ttl_created_at    DateTime
    ttl_updated_at    DateTime
    ttl_chr_id        String
    ttl_chr           Character     @relation(fields: [ttl_chr_id], references: [chr_id])
    ttl_org           Organization? @relation(fields: [ttl_org_id], references: [org_id])
}

model Ancestry {
    anc_id            String      @id @default(uuid())
    anc_name          String
    anc_description   String
    anc_created_at    DateTime    @default(now())
    anc_updated_at    DateTime    @updatedAt
    anc_chr           Character[]
}

model Class {
    cls_id            String      @id @default(uuid())
    cls_name          String
    cls_description   String
    cls_created_at    DateTime    @default(now())
    cls_updated_at    DateTime    @updatedAt
    cls_chr           Character[]
}

model School {
    sch_id            String      @id @default(uuid())
    sch_name          String
    sch_description   String
    sch_created_at    DateTime    @default(now())
    sch_updated_at    DateTime    @updatedAt
    sch_chr           Character[]
}

model Quote {
    qte_id            String      @id @default(uuid())
    qte_quote         String
    qte_chr_id        String
    qte_source        String
    qte_source_url    String
    qte_first_quote   Boolean
    qte_last_quote    Boolean
    qte_created_at    DateTime    @default(now())
    qte_updated_at    DateTime    @updatedAt
    qte_chr           Character   @relation(fields: [qte_chr_id], references: [chr_id])
}

model Campaign {
    cmp_id            String      @id @default(uuid())
    cmp_name          String
    cmp_description   String
    cmp_created_at    DateTime    @default(now())
    cmp_updated_at    DateTime    @updatedAt
    cmp_chr           Character[]
    cmp_usr           CampaignUser[]
}

model CampaignUser {
    csr_cmp_id        String
    csr_usr_id        String
    csr_chr_id        String?
    csr_joined_at     DateTime      @default(now())
    csr_chr           Character?    @relation(fields: [csr_chr_id], references: [chr_id])
    csr_cmp           Campaign      @relation(fields: [csr_cmp_id], references: [cmp_id])
    csr_usr           User          @relation(fields: [csr_usr_id], references: [usr_id])
    @@id([csr_cmp_id, csr_usr_id])
}

model User {
    usr_id            String        @id @default(uuid())
    usr_name          String
    usr_username      String
    usr_password      String
    usr_description   String
    usr_mare          Boolean
    usr_created_at    DateTime
    usr_updated_at    DateTime
    usr_written_chr   Character[]   @relation("WrittenByUser")
    usr_created_chr   Character[]   @relation("CreatedByUser")
    usr_updated_chr   Character[]   @relation("UpdatedByUser")
    usr_cmp           CampaignUser[]
    usr_org           Organization[]
}

model FamilyRelationship {
    rel_id            String      @id @default(uuid())
    rel_type          String
    rel_chr_parent_id String
    rel_chr_child_id  String
    rel_chr_parent    Character   @relation("ParentCharacter", fields: [rel_chr_parent_id], references: [chr_id])
    rel_chr_child     Character   @relation("ChildCharacter", fields: [rel_chr_child_id], references: [chr_id])
}

model FamilyUnion {
    uni_id            String      @id @default(uuid())
    uni_type          String
    uni_first_chr_id  String
    uni_second_chr_id String
    uni_first_chr     Character   @relation("UnionCharacter1", fields: [uni_first_chr_id], references: [chr_id])
    uni_second_chr    Character   @relation("UnionCharacter2", fields: [uni_second_chr_id], references: [chr_id])
}

model Organization {
    org_id                String      @id @default(uuid())
    org_description       String
    org_foundation_date   String
    org_observations      String
    org_plc_id            String?
    org_created_by_usr_id String
    org_created_at        DateTime
    org_updated_at        DateTime
    org_aff               Affiliation[]
    org_plc               Place?      @relation(fields: [org_plc_id], references: [plc_id])
    org_created_by_usr    User        @relation(fields: [org_created_by_usr_id], references: [usr_id])
    org_ttl               Title[]
    org_names             OrganizationName[]
}

model OrganizationName {
    orn_id            String          @id @default(uuid())
    orn_org_id        String
    orn_name          String
    orn_description   String
    orn_main_name     Boolean
    orn_created_at    DateTime        @default(now())
    orn_updated_at    DateTime        @updatedAt
    orn_org           Organization    @relation(fields: [orn_org_id], references: [org_id])
}

model Affiliation {
    aff_id            String        @id @default(uuid())
    aff_role          String
    aff_leader        Boolean
    aff_chr_id        String
    aff_plc_id        String?
    aff_org_id        String?
    aff_chr           Character     @relation(fields: [aff_chr_id], references: [chr_id])
    aff_org           Organization? @relation(fields: [aff_org_id], references: [org_id])
    aff_plc           Place?        @relation(fields: [aff_plc_id], references: [plc_id])
}

enum Pronouns {
    he_him
    she_her
    they_them
    she_he
    they_she
    they_he
    they_she_he
    unknown
    none
    all
    other
}

enum Status {
    alive
    dead
    missing
    fugitive
    imprisoned
    unknown
}