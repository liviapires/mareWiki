generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Character {
    chr_id                      String                  @id @default(uuid())
    chr_name                    String
    chr_epithet                 String
    chr_physical_description    String
    chr_height                  String
    chr_occupation              String
    chr_birthday                String
    chr_observations            String
    chr_pronouns                Pronouns
    chr_status                  Status
    chr_anc_id                  String
    chr_cls_id                  String
    chr_sch_id                  String?
    chr_plc_id                  String
    chr_cmp_id                  String
    chr_first_appeared_cmp_id   String
    chr_last_appeared_cmp_id    String
    chr_umal_student            Boolean
    chr_fty_id                  String?
    chr_archmage                Boolean
    chr_archmage_date           String?
    chr_archmage_plc_id         String?
    chr_written_by_usr_id       String
    chr_created_by_usr_id       String
    chr_updated_by_usr_id       String
    chr_created_at              DateTime                @default(now())
    chr_updated_at              DateTime                @updatedAt
    chr_anc                     Ancestry                @relation(fields: [chr_anc_id], references: [anc_id])
    chr_cls                     Class                   @relation(fields: [chr_cls_id], references: [cls_id])
    chr_sch                     School?                 @relation(fields: [chr_sch_id], references: [sch_id])
    chr_place                   Place                   @relation("PlaceCharacter", fields: [chr_plc_id], references: [plc_id])
    chr_cmp                     Campaign                @relation(fields: [chr_cmp_id], references: [cmp_id])
    chr_archmage_plc            Place?                  @relation("PlaceArchmage", fields: [chr_archmage_plc_id], references: [plc_id])
    chr_fty                     Fraternity?             @relation("Fraternity", fields: [chr_fty_id], references: [fty_id])
    chr_qte                     Quote[]    
    chr_ctl                     CharacterTitle[]
    chr_affiliations            Affiliation[]
    chr_parent_rel              FamilyRelationship[]    @relation("ParentCharacter")
    chr_child_rel               FamilyRelationship[]    @relation("ChildCharacter")
    chr_uni_first               FamilyUnion[]           @relation("UnionCharacter1")
    chr_uni_second              FamilyUnion[]           @relation("UnionCharacter2")
    chr_written_by_usr          User[]                  @relation("WrittenByUser")
    chr_created_by_usr          User[]                  @relation("CreatedByUser")
    chr_updated_by_usr          User[]                  @relation("UpdatedByUser")
    chr_cmp_usr                 CampaignUser[]
    chr_alc                     AlchemicalCompound[]
    chr_itm                     ItemOwner[]
    chr_igb                     InGameBook[]
    chr_fty_president           Fraternity[]            @relation("FraternityPresident")
    chr_umf                     FraternityFounder[]
}

model Place {
    plc_id                      String                  @id @default(uuid())
    plc_name                    String
    plc_description             String
    plc_type                    String
    plc_observations            String
    plc_parent_id               String?
    plc_created_at              DateTime                @default(now())
    plc_updated_at              DateTime                @updatedAt
    plc_parent                  Place?                  @relation("PlaceParent", fields: [plc_parent_id], references: [plc_id])
    plc_children                Place[]                 @relation("PlaceParent")
    plc_chr_archmage            Character[]             @relation("PlaceArchmage")
    plc_chr                     Character[]             @relation("PlaceCharacter")
    plc_aff                     Affiliation[]
    plc_org                     Organization[]
    plc_mgt_city                MagobolTeam[]           @relation("MagobolCity")
    plc_mgt_country             MagobolTeam[]           @relation("MagobolCountry")
    plc_dis                     Dish[]
    plc_drk                     Drink[]
    plc_alc                     AlchemicalCompound[]
    plc_cre                     Creature[]
    plc_sng                     Song[]
    plc_art                     Art[]
    plc_fty                     Fraternity[]
}

model CharacterTitle {
    ctl_id                      String                  @id @default(uuid())
    ctl_name                    String
    ctl_description             String
    ctl_org_id                  String?
    ctl_chr_id                  String
    ctl_created_at              DateTime                @default(now())
    ctl_updated_at              DateTime                @updatedAt
    ctl_chr                     Character               @relation(fields: [ctl_chr_id], references: [chr_id])
    ctl_org                     Organization?           @relation(fields: [ctl_org_id], references: [org_id])
}

model Deity {
    dty_id                      String                  @id @default(uuid())
    dty_name                    String
    dty_description             String
    dty_symbol                  String
    dty_observation             String
    dty_created_at              DateTime                @default(now())
    dty_updated_at              DateTime                @updatedAt
    dty_dtl                     DeityTitle[]
    dty_dte                     DeityEpithet[]
    dty_dtd                     DeityDomain[]
}

model DeityTitle {
    dtl_id                      String                  @id @default(uuid())
    dtl_name                    String
    dtl_dty_id                  String
    dtl_created_at              DateTime                @default(now())
    dtl_updated_at              DateTime                @updatedAt
    dtl_dty                     Deity                   @relation(fields: [dtl_dty_id], references: [dty_id])
}

model DeityEpithet {
    dte_id                      String                  @id @default(uuid())
    dte_name                    String
    dte_dty_id                  String
    dte_created_at              DateTime                @default(now())
    dte_updated_at              DateTime                @updatedAt
    dte_dty                     Deity                   @relation(fields: [dte_dty_id], references: [dty_id])
}

model DeityDomain {
    dtd_id                      String                  @id @default(uuid())
    dtd_name                    String
    dtd_dty_id                  String
    dtd_created_at              DateTime                @default(now())
    dtd_updated_at              DateTime                @updatedAt
    dtd_dty                     Deity                   @relation(fields: [dtd_dty_id], references: [dty_id])
}

model Ancestry {
    anc_id                      String                  @id @default(uuid())
    anc_name                    String
    anc_description             String
    anc_created_at              DateTime                @default(now())
    anc_updated_at              DateTime                @updatedAt
    anc_chr                     Character[]
}

model Class {
    cls_id                      String                  @id @default(uuid())
    cls_name                    String
    cls_description             String
    cls_created_at              DateTime                @default(now())
    cls_updated_at              DateTime                @updatedAt
    cls_chr                     Character[]
}

model School {
    sch_id                      String                  @id @default(uuid())
    sch_name                    String
    sch_description             String
    sch_created_at              DateTime                @default(now())
    sch_updated_at              DateTime                @updatedAt
    sch_chr                     Character[]
}

model Quote {
    qte_id                      String                  @id @default(uuid())
    qte_quote                   String
    qte_chr_id                  String
    qte_source                  String
    qte_source_url              String
    qte_first_quote             Boolean
    qte_last_quote              Boolean
    qte_created_at              DateTime                @default(now())
    qte_updated_at              DateTime                @updatedAt
    qte_chr                     Character               @relation(fields: [qte_chr_id], references: [chr_id])
}

model Campaign {
    cmp_id                      String                  @id @default(uuid())
    cmp_name                    String
    cmp_description             String
    cmp_created_at              DateTime                @default(now())
    cmp_updated_at              DateTime                @updatedAt
    cmp_chr                     Character[]
    cmp_usr                     CampaignUser[]
    cmp_eps                     Episode[]
    cmp_sng                     Song[]
}

model Episode {
    eps_id                      String                  @id @default(uuid())
    eps_number                  Int
    eps_name                    String
    eps_date                    DateTime
    eps_cmp_id                  String?
    eps_created_at              DateTime                @default(now())
    eps_updated_at              DateTime                @updatedAt
    eps_cmp                     Campaign?               @relation(fields: [eps_cmp_id], references: [cmp_id])
    eps_sng                     Song[]
}

model CampaignUser {
    csr_cmp_id                  String
    csr_usr_id                  String
    csr_chr_id                  String?
    csr_joined_at               DateTime
    csr_created_at              DateTime                @default(now())
    csr_updated_at              DateTime                @updatedAt
    csr_chr                     Character?              @relation(fields: [csr_chr_id], references: [chr_id])
    csr_cmp                     Campaign                @relation(fields: [csr_cmp_id], references: [cmp_id])
    csr_usr                     User                    @relation(fields: [csr_usr_id], references: [usr_id])
    @@id([csr_cmp_id, csr_usr_id])
}

model User {
    usr_id                      String                  @id @default(uuid())
    usr_name                    String
    usr_username                String
    usr_password                String
    usr_description             String
    usr_mare                    Boolean
    usr_created_at              DateTime                @default(now())
    usr_updated_at              DateTime                @updatedAt
    usr_written_chr             Character[]             @relation("WrittenByUser")
    usr_created_chr             Character[]             @relation("CreatedByUser")
    usr_updated_chr             Character[]             @relation("UpdatedByUser")
    usr_cmp                     CampaignUser[]
    usr_org                     Organization[]
}

model FamilyRelationship {
    rel_id                      String                  @id @default(uuid())
    rel_type                    String
    rel_chr_parent_id           String
    rel_chr_child_id            String
    rel_created_at              DateTime                @default(now())
    rel_updated_at              DateTime                @updatedAt
    rel_chr_parent              Character               @relation("ParentCharacter", fields: [rel_chr_parent_id], references: [chr_id])
    rel_chr_child               Character               @relation("ChildCharacter", fields: [rel_chr_child_id], references: [chr_id])
}

model FamilyUnion {
    uni_id                      String                  @id @default(uuid())
    uni_type                    String
    uni_first_chr_id            String
    uni_second_chr_id           String
    uni_created_at              DateTime                @default(now())
    uni_updated_at              DateTime                @updatedAt
    uni_first_chr               Character               @relation("UnionCharacter1", fields: [uni_first_chr_id], references: [chr_id])
    uni_second_chr              Character               @relation("UnionCharacter2", fields: [uni_second_chr_id], references: [chr_id])
}

model Organization {
    org_id                      String                  @id @default(uuid())
    org_description             String
    org_foundation_date         String
    org_observations            String
    org_plc_id                  String?
    org_created_by_usr_id       String
    org_created_at              DateTime                @default(now())
    org_updated_at              DateTime                @updatedAt
    org_aff                     Affiliation[]
    org_plc                     Place?                  @relation(fields: [org_plc_id], references: [plc_id])
    org_created_by_usr          User                    @relation(fields: [org_created_by_usr_id], references: [usr_id])
    org_ttl                     CharacterTitle[]
    org_names                   OrganizationName[]
}

model OrganizationName {
    orn_id                      String                  @id @default(uuid())
    orn_org_id                  String
    orn_name                    String
    orn_description             String
    orn_main_name               Boolean
    orn_created_at              DateTime                @default(now())
    orn_updated_at              DateTime                @updatedAt
    orn_org                     Organization            @relation(fields: [orn_org_id], references: [org_id])
}

model MagobolTeam {
    mgt_id                      String                  @id @default(uuid())
    mgt_name                    String
    mgt_description             String
    mgt_city_id                 String
    mgt_country_id              String
    mgt_symbol                  String
    mgt_colors                  Colors
    mgt_league                  String
    mgt_created_at              DateTime                @default(now())
    mgt_updated_at              DateTime                @updatedAt
    mgt_city                    Place?                  @relation("MagobolCity", fields: [mgt_city_id], references: [plc_id])
    mgt_country                 Place?                  @relation("MagobolCountry", fields: [mgt_country_id], references: [plc_id])
    mgt_aff                     Affiliation[]
}

model Affiliation {
    aff_id                      String                  @id @default(uuid())
    aff_role                    String
    aff_leader                  Boolean
    aff_chr_id                  String
    aff_plc_id                  String?
    aff_org_id                  String?
    aff_mgt_id                  String?
    aff_created_at              DateTime                @default(now())
    aff_updated_at              DateTime                @updatedAt
    aff_chr                     Character               @relation(fields: [aff_chr_id], references: [chr_id])
    aff_org                     Organization?           @relation(fields: [aff_org_id], references: [org_id])
    aff_plc                     Place?                  @relation(fields: [aff_plc_id], references: [plc_id])
    aff_mgt                     MagobolTeam?            @relation(fields: [aff_mgt_id], references: [mgt_id])
}

model Beverage {
    bvr_id                      String                  @id @default(uuid())
    bvr_name                    String
    bvr_description             String
    bvr_created_at              DateTime                @default(now())
    bvr_updated_at              DateTime                @updatedAt
    bvr_ing                     Ingredient[]
}

model Drink {
    drk_id                      String                  @id @default(uuid())
    drk_name                    String
    drk_description             String
    drk_plc_id                  String
    drk_created_at              DateTime                @default(now())
    drk_updated_at              DateTime                @updatedAt
    drk_plc                     Place                   @relation(fields: [drk_plc_id], references: [plc_id])
    drk_ing                     Ingredient[]
    drk_fty                     Fraternity[]
}

model Food {
    foo_id                      String                  @id @default(uuid())
    foo_name                    String
    foo_description             String
    foo_created_at              DateTime                @default(now())
    foo_updated_at              DateTime                @updatedAt
    foo_ing                     Ingredient[]
}

model Dish {
    dis_id                      String                  @id @default(uuid())
    dis_name                    String
    dis_description             String
    dis_plc_id                  String
    dis_created_at              DateTime                @default(now())
    dis_updated_at              DateTime                @updatedAt
    dis_plc                     Place                   @relation(fields: [dis_plc_id], references: [plc_id])
    dis_ing                     Ingredient[]
}

model AlchemicalCompound {
    alc_id                      String                  @id @default(uuid())
    alc_name                    String
    alc_type                    String
    alc_function                String
    alc_plc_id                  String?
    alc_chr_id                  String?
    alc_created_at              DateTime                @default(now())
    alc_updated_at              DateTime                @updatedAt
    alc_ing                     Ingredient[]
    alc_plc                     Place?                  @relation(fields: [alc_plc_id], references: [plc_id])
    alc_chr                     Character?              @relation(fields: [alc_chr_id], references: [chr_id])
}

model Ingredient {
    ing_id                      String                  @id @default(uuid())
    ing_drk_id                  String?
    ing_dis_id                  String?
    ing_foo_id                  String?
    ing_bvr_id                  String?
    ing_alc_id                  String?
    ing_quantity                String
    ing_created_at              DateTime                @default(now())
    ing_updated_at              DateTime                @updatedAt
    ing_drk                     Drink?                  @relation(fields: [ing_drk_id], references: [drk_id])
    ing_dis                     Dish?                   @relation(fields: [ing_dis_id], references: [dis_id])
    ing_foo                     Food?                   @relation(fields: [ing_foo_id], references: [foo_id])
    ing_bvr                     Beverage?               @relation(fields: [ing_bvr_id], references: [bvr_id])
    ing_alc                     AlchemicalCompound?     @relation(fields: [ing_alc_id], references: [alc_id])
}

model Creature {
    cre_id                      String                  @id @default(uuid())
    cre_name                    String
    cre_type                    String
    cre_description             String
    cre_observations            String
    cre_plc_id                  String?
    cre_created_at              DateTime                @default(now())
    cre_updated_at              DateTime                @updatedAt
    cre_plc                     Place?                  @relation(fields: [cre_plc_id], references: [plc_id])
}

model Dragon {
    drg_id                      String                  @id @default(uuid())
    drg_name                    String
    drg_type                    String
    drg_form                    String
    drg_magic                   String
    drg_breath                  String
    drg_description             String
    drg_observations            String
    drg_created_at              DateTime                @default(now())
    drg_updated_at              DateTime                @updatedAt
    drg_dge                     DragonEpithet[]
}

model DragonEpithet {
    dge_id                      String                  @id @default(uuid())
    dge_name                    String
    dge_drg_id                  String
    dge_created_at              DateTime                @default(now())
    dge_updated_at              DateTime                @updatedAt
    dge_dragon                  Dragon                  @relation(fields: [dge_drg_id], references: [drg_id])
}

model Item {
    itm_id                      String                  @id @default(uuid())
    itm_name                    String
    itm_description             String
    itm_type                    String
    itm_subtype                 String
    itm_magical_properties      String
    itm_value                   String
    itm_cmp_id                  String?
    itm_created_at              DateTime                @default(now())
    itm_updated_at              DateTime                @updatedAt
    itm_own                     ItemOwner[]
}

model ItemOwner {
    iow_id                      String                  @id @default(uuid())
    iow_chr_id                  String
    iow_itm_id                  String
    iow_created_at              DateTime                @default(now())
    iow_updated_at              DateTime                @updatedAt
    iow_chr                     Character               @relation(fields: [iow_chr_id], references: [chr_id])
    iow_itm                     Item                    @relation(fields: [iow_itm_id], references: [itm_id])
}

model InGameBook {
    igb_id                      String                  @id @default(uuid())
    igb_name                    String
    igb_description             String
    igb_author_chr_id           String
    igb_type                    String
    igb_cmp_id                  String?
    igb_created_at              DateTime                @default(now())
    igb_updated_at              DateTime                @updatedAt
    igb_chr                     Character               @relation(fields: [igb_author_chr_id], references: [chr_id])
}

model Song {
    sng_id                      String                  @id @default(uuid())
    sng_name                    String
    sng_description             String
    sng_author                  String
    sng_genre                   String
    sng_origin                  String
    sng_lyrics                  String?
    sng_plc_id                  String?
    sng_eps_id                  String?
    sng_cmp_id                  String?
    sng_oog_id                  String?
    sng_created_at              DateTime                @default(now())
    sng_updated_at              DateTime                @updatedAt
    sng_plc                     Place?                  @relation(fields: [sng_plc_id], references: [plc_id])
    sng_eps                     Episode?                @relation(fields: [sng_eps_id], references: [eps_id])
    sng_cmp                     Campaign?               @relation(fields: [sng_cmp_id], references: [cmp_id])
    sng_ext                     OutOfGameStory?         @relation(fields: [sng_oog_id], references: [oog_id])
}

model OutOfGameStory {
    oog_id                      String                  @id @default(uuid())
    oog_name                    String
    oog_description             String
    oog_type                    OutOfGameStoryType
    oog_created_at              DateTime                @default(now())
    oog_updated_at              DateTime                @updatedAt
    oog_sng                     Song[]
}

model Art {
    art_id                      String                  @id @default(uuid())
    art_title                   String
    art_description             String
    art_author                  String
    art_date                    String
    art_materials               String
    art_dimensions              String
    art_type                    String
    art_plc_id                  String?
    art_created_at              DateTime                @default(now())
    art_updated_at              DateTime                @updatedAt
    art_plc                     Place?                  @relation(fields: [art_plc_id], references: [plc_id])
}

model Fraternity {
    fty_id                      String                  @id @default(uuid())
    fty_name                    String
    fty_motto                   String
    fty_virtues                 String
    fty_description             String
    fty_colors                  Colors
    fty_symbol                  String
    fty_drk_id                  String?
    fty_president_id            String?
    fty_foundation_date         String
    fty_cape                    String
    fty_plc_id                  String
    fty_created_at              DateTime                @default(now())
    fty_updated_at              DateTime                @updatedAt
    fty_chr                     Character[]             @relation("Fraternity")
    fty_umf                     FraternityFounder[]
    fty_plc                     Place                   @relation(fields: [fty_plc_id], references: [plc_id])
    fty_drk                     Drink?                  @relation(fields: [fty_drk_id], references: [drk_id])
    fty_president               Character?              @relation("FraternityPresident", fields: [fty_president_id], references: [chr_id])
}

model FraternityFounder {
    umf_id                      String                  @id @default(uuid())
    umf_fty_id                  String
    umf_chr_id                  String
    umf_created_at              DateTime                @default(now())
    umf_updated_at              DateTime                @updatedAt
    umf_fty                     Fraternity              @relation(fields: [umf_fty_id], references: [fty_id])
    umf_chr                     Character               @relation(fields: [umf_chr_id], references: [chr_id])
}

model GameAndSport {
    gam_id                      String                  @id @default(uuid())
    gam_name                    String
    gam_description             String
    gam_created_at              DateTime                @default(now())
    gam_updated_at              DateTime                @updatedAt
}

model Calendar {
    cal_id                      String                  @id @default(uuid())
    cal_name                    String
    cal_description             String
    cal_days_per_week           Int
    cal_days_per_month          Int
    cal_days_per_year           Int
    cal_created_at              DateTime                @default(now())
    cal_updated_at              DateTime                @updatedAt
    cal_cwd                     CalendarWeekDay[]
    cal_cmo                     CalendarMonth[]
    cal_cse                     CalendarSeason[]
    cal_mon                     CalendarMoon[]
    cal_cdt                     CalendarDate[]
}

model CalendarWeekDay {
    cwd_id                      String                  @id @default(uuid())
    cwd_name                    String
    cwd_cal_id                  String
    cwd_created_at              DateTime                @default(now())
    cwd_updated_at              DateTime                @updatedAt
    cwd_cal                     Calendar                @relation(fields: [cwd_cal_id], references: [cal_id])
}

model CalendarMonth {
    cmo_id                      String                  @id @default(uuid())
    cmo_name                    String
    cmo_cal_id                  String
    cmo_created_at              DateTime                @default(now())
    cmo_updated_at              DateTime                @updatedAt
    cmo_cal                     Calendar                @relation(fields: [cmo_cal_id], references: [cal_id])
    cmo_mse                     MonthSeason[]
}

model CalendarSeason {
    cse_id                      String                  @id @default(uuid())
    cse_name                    String
    cse_cal_id                  String
    cse_start_date              DateTime
    cse_end_date                DateTime
    cse_created_at              DateTime                @default(now())
    cse_updated_at              DateTime                @updatedAt
    cse_cal                     Calendar                @relation(fields: [cse_cal_id], references: [cal_id])
    cse_mse                     MonthSeason[]
}

model MonthSeason {
    mse_id                      String                  @id @default(uuid())
    mse_name                    String
    mse_mon_id                  String
    mse_cse_id                  String
    mse_created_at              DateTime                @default(now())
    mse_updated_at              DateTime                @updatedAt
    mse_mon                     CalendarMonth           @relation(fields: [mse_mon_id], references: [cmo_id])    
    mse_cse                     CalendarSeason          @relation(fields: [mse_cse_id], references: [cse_id])
}

model CalendarMoon {
    cmn_id                      String                  @id @default(uuid())
    cmn_name                    String
    cmn_color                   Colors
    cmn_cal_id                  String
    cmn_created_at              DateTime                @default(now())
    cmn_updated_at              DateTime                @updatedAt
    cmn_cal                     Calendar                @relation(fields: [cmn_cal_id], references: [cal_id])
    cmn_mph                     MoonPhase[]
}

model MoonPhase {
    mph_id                      String                  @id @default(uuid())
    mph_name                    String
    mph_description             String
    mph_cmn_id                  String
    mph_created_at              DateTime                @default(now())
    mph_updated_at              DateTime                @updatedAt
    mph_cmn                     CalendarMoon            @relation(fields: [mph_cmn_id], references: [cmn_id])
}

model CalendarDate {
    cdt_id                      String                  @id @default(uuid())
    cdt_day                     Int
    cdt_month                   Int
    cdt_year                    Int
    cdt_cal_id                  String
    cdt_created_at              DateTime                @default(now())
    cdt_updated_at              DateTime                @updatedAt
    cdt_cal                     Calendar                @relation(fields: [cdt_cal_id], references: [cal_id])
    cdt_evt                     CalendarEvent[]
}

model CalendarEvent {
    cev_id                      String                  @id @default(uuid())
    cev_name                    String
    cev_description             String
    cev_cdt_id                  String
    cev_cal_id                  String
    cev_recurring               Boolean
    cev_recurring_type          RecurringType
    cev_created_at              DateTime                @default(now())
    cev_updated_at              DateTime                @updatedAt
    cev_cdt                     CalendarDate            @relation(fields: [cev_cdt_id], references: [cdt_id])
}

enum Pronouns {
    he_him
    she_her
    they_them
    she_he
    they_she
    they_he
    they_she_he
    unknown
    none
    all
    other
}

enum Status {
    alive
    dead
    missing
    fugitive
    imprisoned
    unknown
}

enum Colors {
    red
    blue
    green
    yellow
    orange
    purple
    pink
    brown
    black
    white
    gray
    gold
    silver
    bronze
}

enum OutOfGameStoryType {
    book
    tale
    news
    article
}

enum RecurringType {
    daily
    weekly
    monthly
    yearly
    once
}