generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Character {
    chr_id                      String                  @id @default(uuid())
    chr_name                    String
    chr_epithet                 String
    chr_physical_description    String
    chr_height                  String
    chr_occupation              String
    chr_birthday                String
    chr_observations            String
    chr_pronouns                Pronouns
    chr_status                  Status
    chr_anc_id                  String
    chr_cls_id                  String
    chr_sch_id                  String?
    chr_plc_id                  String
    chr_cmp_id                  String
    chr_first_appeared_cmp_id   String
    chr_last_appeared_cmp_id    String
    chr_archmage                Boolean
    chr_archmage_date           String?
    chr_archmage_plc_id         String?
    chr_written_by_usr_id       String
    chr_created_by_usr_id       String
    chr_updated_by_usr_id       String
    chr_created_at              DateTime                @default(now())
    chr_updated_at              DateTime                @updatedAt
    chr_anc                     Ancestry                @relation(fields: [chr_anc_id], references: [anc_id])
    chr_cls                     Class                   @relation(fields: [chr_cls_id], references: [cls_id])
    chr_sch                     School?                 @relation(fields: [chr_sch_id], references: [sch_id])
    chr_place                   Place                   @relation("PlaceCharacter", fields: [chr_plc_id], references: [plc_id])
    chr_cmp                     Campaign                @relation(fields: [chr_cmp_id], references: [cmp_id])
    chr_archmage_plc            Place?                  @relation("PlaceArchmage", fields: [chr_archmage_plc_id], references: [plc_id])
    chr_qte                     Quote[]    
    chr_ctl                     CharacterTitle[]
    chr_affiliations            Affiliation[]
    chr_parent_rel              FamilyRelationship[]    @relation("ParentCharacter")
    chr_child_rel               FamilyRelationship[]    @relation("ChildCharacter")
    chr_uni_first               FamilyUnion[]           @relation("UnionCharacter1")
    chr_uni_second              FamilyUnion[]           @relation("UnionCharacter2")
    chr_written_by_usr          User[]                  @relation("WrittenByUser")
    chr_created_by_usr          User[]                  @relation("CreatedByUser")
    chr_updated_by_usr          User[]                  @relation("UpdatedByUser")
    chr_cmp_usr                 CampaignUser[]
    chr_alc                     AlchemicalCompound[]
}

model Place {
    plc_id            String            @id @default(uuid())
    plc_name          String
    plc_description   String
    plc_type          String
    plc_observations  String
    plc_parent_id     String?
    plc_created_at    DateTime          @default(now())
    plc_updated_at    DateTime          @updatedAt
    plc_parent        Place?            @relation("PlaceParent", fields: [plc_parent_id], references: [plc_id])
    plc_children      Place[]           @relation("PlaceParent")
    plc_chr_archmage  Character[]       @relation("PlaceArchmage")
    plc_chr           Character[]       @relation("PlaceCharacter")
    plc_aff           Affiliation[]
    plc_org           Organization[]
    plc_mgt_city      MagobolTeam[]     @relation("MagobolCity")
    plc_mgt_country   MagobolTeam[]     @relation("MagobolCountry")
    plc_dis           Dish[]            
    plc_drk           Drink[]
    plc_alc           AlchemicalCompound[]
    plc_cre           Creature[]
}

model CharacterTitle {
    ctl_id            String        @id @default(uuid())
    ctl_name          String
    ctl_description   String
    ctl_org_id        String?
    ctl_chr_id        String
    ctl_created_at    DateTime      @default(now())
    ctl_updated_at    DateTime      @updatedAt
    ctl_chr           Character     @relation(fields: [ctl_chr_id], references: [chr_id])
    ctl_org           Organization? @relation(fields: [ctl_org_id], references: [org_id])
}

model Deity {
    dty_id            String      @id @default(uuid())
    dty_name          String
    dty_description   String
    dty_symbol        String
    dty_observation   String
    dty_created_at    DateTime    @default(now())
    dty_updated_at    DateTime    @updatedAt
    dty_dtl           DeityTitle[]
    dty_dte           DeityEpithet[]
    dty_dtd           DeityDomain[]
}

model DeityTitle {
    dtl_id            String      @id @default(uuid())
    dtl_name          String
    dtl_dty_id        String
    dtl_created_at    DateTime    @default(now())
    dtl_updated_at    DateTime    @updatedAt
    dtl_dty           Deity       @relation(fields: [dtl_dty_id], references: [dty_id])
}

model DeityEpithet {
    dte_id            String      @id @default(uuid())
    dte_name          String
    dte_dty_id        String
    dte_created_at    DateTime    @default(now())
    dte_updated_at    DateTime    @updatedAt
    dte_dty           Deity       @relation(fields: [dte_dty_id], references: [dty_id])
}

model DeityDomain {
    dtd_id            String      @id @default(uuid())
    dtd_name          String
    dtd_dty_id        String
    dtd_created_at    DateTime    @default(now())
    dtd_updated_at    DateTime    @updatedAt
    dtd_dty           Deity       @relation(fields: [dtd_dty_id], references: [dty_id])
}

model Ancestry {
    anc_id            String      @id @default(uuid())
    anc_name          String
    anc_description   String
    anc_created_at    DateTime    @default(now())
    anc_updated_at    DateTime    @updatedAt
    anc_chr           Character[]
}

model Class {
    cls_id            String      @id @default(uuid())
    cls_name          String
    cls_description   String
    cls_created_at    DateTime    @default(now())
    cls_updated_at    DateTime    @updatedAt
    cls_chr           Character[]
}

model School {
    sch_id            String      @id @default(uuid())
    sch_name          String
    sch_description   String
    sch_created_at    DateTime    @default(now())
    sch_updated_at    DateTime    @updatedAt
    sch_chr           Character[]
}

model Quote {
    qte_id            String      @id @default(uuid())
    qte_quote         String
    qte_chr_id        String
    qte_source        String
    qte_source_url    String
    qte_first_quote   Boolean
    qte_last_quote    Boolean
    qte_created_at    DateTime    @default(now())
    qte_updated_at    DateTime    @updatedAt
    qte_chr           Character   @relation(fields: [qte_chr_id], references: [chr_id])
}

model Campaign {
    cmp_id            String      @id @default(uuid())
    cmp_name          String
    cmp_description   String
    cmp_created_at    DateTime    @default(now())
    cmp_updated_at    DateTime    @updatedAt
    cmp_chr           Character[]
    cmp_usr           CampaignUser[]
}

model CampaignUser {
    csr_cmp_id        String
    csr_usr_id        String
    csr_chr_id        String?
    csr_joined_at     DateTime
    csr_created_at    DateTime      @default(now())
    csr_updated_at    DateTime      @updatedAt
    csr_chr           Character?    @relation(fields: [csr_chr_id], references: [chr_id])
    csr_cmp           Campaign      @relation(fields: [csr_cmp_id], references: [cmp_id])
    csr_usr           User          @relation(fields: [csr_usr_id], references: [usr_id])
    @@id([csr_cmp_id, csr_usr_id])
}

model User {
    usr_id            String        @id @default(uuid())
    usr_name          String
    usr_username      String
    usr_password      String
    usr_description   String
    usr_mare          Boolean
    usr_created_at    DateTime      @default(now())
    usr_updated_at    DateTime      @updatedAt
    usr_written_chr   Character[]   @relation("WrittenByUser")
    usr_created_chr   Character[]   @relation("CreatedByUser")
    usr_updated_chr   Character[]   @relation("UpdatedByUser")
    usr_cmp           CampaignUser[]
    usr_org           Organization[]
}

model FamilyRelationship {
    rel_id            String      @id @default(uuid())
    rel_type          String
    rel_chr_parent_id String
    rel_chr_child_id  String
    rel_created_at    DateTime    @default(now())
    rel_updated_at    DateTime    @updatedAt
    rel_chr_parent    Character   @relation("ParentCharacter", fields: [rel_chr_parent_id], references: [chr_id])
    rel_chr_child     Character   @relation("ChildCharacter", fields: [rel_chr_child_id], references: [chr_id])
}

model FamilyUnion {
    uni_id            String      @id @default(uuid())
    uni_type          String
    uni_first_chr_id  String
    uni_second_chr_id String
    uni_created_at    DateTime    @default(now())
    uni_updated_at    DateTime    @updatedAt
    uni_first_chr     Character   @relation("UnionCharacter1", fields: [uni_first_chr_id], references: [chr_id])
    uni_second_chr    Character   @relation("UnionCharacter2", fields: [uni_second_chr_id], references: [chr_id])
}

model Organization {
    org_id                String      @id @default(uuid())
    org_description       String
    org_foundation_date   String
    org_observations      String
    org_plc_id            String?
    org_created_by_usr_id String
    org_created_at        DateTime   @default(now())
    org_updated_at        DateTime   @updatedAt
    org_aff               Affiliation[]
    org_plc               Place?      @relation(fields: [org_plc_id], references: [plc_id])
    org_created_by_usr    User        @relation(fields: [org_created_by_usr_id], references: [usr_id])
    org_ttl               CharacterTitle[]
    org_names             OrganizationName[]
}

model OrganizationName {
    orn_id            String          @id @default(uuid())
    orn_org_id        String
    orn_name          String
    orn_description   String
    orn_main_name     Boolean
    orn_created_at    DateTime        @default(now())
    orn_updated_at    DateTime        @updatedAt
    orn_org           Organization    @relation(fields: [orn_org_id], references: [org_id])
}

model MagobolTeam {
    mgt_id            String      @id @default(uuid())
    mgt_name          String
    mgt_description   String
    mgt_city_id       String
    mgt_country_id    String
    mgt_symbol        String
    mgt_colors        Colors
    mgt_league        String
    mgt_created_at    DateTime    @default(now())
    mgt_updated_at    DateTime    @updatedAt
    mgt_city          Place?      @relation("MagobolCity", fields: [mgt_city_id], references: [plc_id])
    mgt_country       Place?      @relation("MagobolCountry", fields: [mgt_country_id], references: [plc_id])
    mgt_aff           Affiliation[]
}

model Affiliation {
    aff_id            String        @id @default(uuid())
    aff_role          String
    aff_leader        Boolean
    aff_chr_id        String
    aff_plc_id        String?
    aff_org_id        String?
    aff_mgt_id        String?
    aff_created_at    DateTime      @default(now())
    aff_updated_at    DateTime      @updatedAt
    aff_chr           Character     @relation(fields: [aff_chr_id], references: [chr_id])
    aff_org           Organization? @relation(fields: [aff_org_id], references: [org_id])
    aff_plc           Place?        @relation(fields: [aff_plc_id], references: [plc_id])
    aff_mgt           MagobolTeam?  @relation(fields: [aff_mgt_id], references: [mgt_id])
}

model Beverage {
    bvr_id            String      @id @default(uuid())
    bvr_name          String
    bvr_description   String
    bvr_created_at    DateTime    @default(now())
    bvr_updated_at    DateTime    @updatedAt
    bvr_ing           Ingredient[]
}

model Drink {
    drk_id            String      @id @default(uuid())
    drk_name          String
    drk_description   String
    drk_plc_id        String
    drk_created_at    DateTime    @default(now())
    drk_updated_at    DateTime    @updatedAt
    drk_plc           Place       @relation(fields: [drk_plc_id], references: [plc_id])
    drk_ing           Ingredient[]
}

model Food {
    foo_id             String     @id @default(uuid())
    foo_name           String
    foo_description    String
    foo_created_at     DateTime   @default(now())
    foo_updated_at     DateTime   @updatedAt
    foo_ing           Ingredient[]
}

model Dish {
    dis_id            String      @id @default(uuid())
    dis_name          String
    dis_description   String
    dis_plc_id        String
    dis_created_at    DateTime    @default(now())
    dis_updated_at    DateTime    @updatedAt
    dis_plc           Place       @relation(fields: [dis_plc_id], references: [plc_id])
    dis_ing           Ingredient[]
}

model AlchemicalCompound {
    alc_id            String      @id @default(uuid())
    alc_name          String
    alc_type          String
    alc_function      String
    alc_plc_id        String?
    alc_chr_id        String?
    alc_created_at    DateTime    @default(now())
    alc_updated_at    DateTime    @updatedAt
    alc_ing           Ingredient[]
    alc_plc           Place?      @relation(fields: [alc_plc_id], references: [plc_id])
    alc_chr           Character?   @relation(fields: [alc_chr_id], references: [chr_id])
}

model Ingredient {
    ing_id            String                @id @default(uuid())
    ing_drk_id        String?
    ing_dis_id        String?
    ing_foo_id        String?
    ing_bvr_id        String?
    ing_alc_id        String?
    ing_quantity      String
    ing_created_at    DateTime              @default(now())
    ing_updated_at    DateTime              @updatedAt
    ing_drk           Drink?                @relation(fields: [ing_drk_id], references: [drk_id])
    ing_dis           Dish?                 @relation(fields: [ing_dis_id], references: [dis_id])
    ing_foo           Food?                 @relation(fields: [ing_foo_id], references: [foo_id])
    ing_bvr           Beverage?             @relation(fields: [ing_bvr_id], references: [bvr_id])
    ing_alc           AlchemicalCompound?   @relation(fields: [ing_alc_id], references: [alc_id])
}

model Creature {
    cre_id            String      @id @default(uuid())
    cre_name          String
    cre_type          String
    cre_description   String
    cre_observations  String
    cre_plc_id        String?
    cre_created_at    DateTime    @default(now())
    cre_updated_at    DateTime    @updatedAt
    cre_plc           Place?      @relation(fields: [cre_plc_id], references: [plc_id])
}

model Dragon {
    drg_id            String      @id @default(uuid())
    drg_name          String
    drg_type          String
    drg_form          String
    drg_magic         String
    drg_breath        String
    drg_description   String
    drg_observations  String
    drg_created_at    DateTime    @default(now())
    drg_updated_at    DateTime    @updatedAt
    drg_dge           DragonEpithet[]
}

model DragonEpithet {
    dge_id            String      @id @default(uuid())
    dge_name          String
    dge_drg_id        String
    dge_created_at    DateTime    @default(now())
    dge_updated_at    DateTime    @updatedAt
    dge_dragon        Dragon      @relation(fields: [dge_drg_id], references: [drg_id])
}

// enums

enum Pronouns {
    he_him
    she_her
    they_them
    she_he
    they_she
    they_he
    they_she_he
    unknown
    none
    all
    other
}

enum Status {
    alive
    dead
    missing
    fugitive
    imprisoned
    unknown
}

enum Colors {
    red
    blue
    green
    yellow
    orange
    purple
    pink
    brown
    black
    white
    gray
    gold
    silver
    bronze
}